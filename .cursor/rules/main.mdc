---
alwaysApply: true
---

<details>
Your task is to help me figure out how to build this project as quickly and efficiently as possible. Basically, what we need to do is build a full-stack web app with a simple UI, simple user interface, where the user can activate this voice agent, and that will trigger the speech-to-speech interaction, and the agent should have access to RAC, Retrieval Augmented Generation, which just means some external PDFs. That means the UI also should have some simple way to upload documents in a format that is supported by the OpenAI real-time API. And we should also show these documents in some folder structure, very simple UI, so that the user can see which documents are being loaded into the voice agent. It is important to follow the scope, but it's also important that you do not overthink this project.
</details>

<technical-spec>
- Use WebRTC in the browser for the web app
</technical-spec>

<step-by-step>
Use WebRTC. Drop Twilio, EHR, WhatsApp, analytics for now.

**4‑step simplified plan**

1. **Monolith scaffold**

* Tech: FastAPI + one static HTML/JS page (no framework) + Tailwind.
* Endpoints: `/session` (mint ephemeral Realtime token), `/upload`, `/list`, `/rag/search`.
* Serve the UI from FastAPI. Single repo. Dockerfile.

2. **Docs + RAG (minimal)**

* Store uploads under `/data/docs/<folder>/`.
* Extract text: PyMuPDF (PDF), python‑docx (Word), plain text.
* Chunk naive by tokens. Embed with `text-embedding-3-small`.
* Index: FAISS on disk (`/data/index.faiss`) + JSON metadata with file paths.
* `/rag/search?q` returns top‑k chunks + source URIs.

3. **Voice agent wiring**

* Frontend uses Realtime WebRTC with ephemeral token.
* Use Agents SDK in the browser to define one tool: `search_kb(query)`.
* Tool handler calls `/rag/search` and returns snippets + citations.
* System prompt: “Answer only from KB. Cite sources. Ask to upload if missing.”
* UI: Start/Stop mic, live transcript, last answer, list of loaded files.

4. **Ship fast**

* Deploy FastAPI container to Railway/Fly with a persistent volume at `/data`.
* Env vars: `OPENAI_API_KEY`, CORS origin.
* Sanity tests: ask 5 clinic FAQs sourced from an uploaded PDF. Verify citations and latency.
</step-by-step>

